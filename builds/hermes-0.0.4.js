!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("HermesWorker",[],r):"object"==typeof exports?exports.HermesWorker=r():e.HermesWorker=r()}(window,(function(){return function(e){var r={};function t(s){if(r[s])return r[s].exports;var i=r[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=e,t.c=r,t.d=function(e,r,s){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:s})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(t.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var i in e)t.d(s,i,function(r){return e[r]}.bind(null,i));return s},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){const s=t(1);e.exports=s},function(e,r,t){const s=t(2).default,i=t(3).default,n=t(4),a=t(5);e.exports=class{constructor(e,r={}){this._workerIsUrl=!1,this._hermesSerializers=new n,this._hermesMessengerUrl=URL.createObjectURL(this._createBlobWithArray([s])),"string"==typeof e?(this._fileWorkerUrl=e,this._workerIsUrl=!0):this._workerFunctionUrl=URL.createObjectURL(this._createBlobWithArray([`(${e.toString()})()`])),this._params=Object.assign({threadInstances:1,safe:!0,scripts:[],serializers:[],config:{}},r),this._MAX_THREAD=navigator.hardwareConcurrency-1,("auto"===this._params.threadInstances||this._params.safe&&this._params.threadInstances>this._MAX_THREAD)&&(this._params.threadInstances=this._MAX_THREAD),this._requestQueue=[],this._pendingsCalls={},this._loadedPromise=[],this._importedScripts=[],this._serializers=[a,...this._params.serializers.reverse()],this.numberOfThreadInstances=this._params.threadInstances,this.isLoaded=!1,this._serializers.forEach(e=>this._hermesSerializers.addSerializer(e)),this._buildHermesSerializerUrl(),this._buildSerializersUrl(),this._computeScriptsAndStartWorkers()}async _computeScriptsAndStartWorkers(){await this._buildInitWorkerFunction(),await this._importScripts(),this._workerBlob=this._buildWorker(),this._workerURL=URL.createObjectURL(this._workerBlob),this._workerPool=[],this._lastWorkerCall=0,this._startWorkers()}_importScripts(){return new Promise(e=>{if(0===this._params.scripts.length)return e();this._importScript(0,e)})}_importScript(e,r){const t=this._params.scripts[e];return fetch(t).then(e=>e.text()).then(t=>(this._importedScripts.push(URL.createObjectURL(this._createBlobWithArray([t]))),e===this._params.scripts.length-1?r():this._importScript(e+1,r)))}_cleanBlobUrls(){URL.revokeObjectURL(this._workerFunctionUrl),URL.revokeObjectURL(this._hermesMessengerUrl),URL.revokeObjectURL(this._hermesSerializerUrl),URL.revokeObjectURL(this._initFunctionUrl),URL.revokeObjectURL(this._serializersUrl),this._importedScripts.forEach(e=>URL.revokeObjectURL(e)),this._importedScripts=[]}_buildWorker(){return this._createBlobWithArray(["window=self;global=self;\n",`importScripts("${this._hermesSerializerUrl}");\n`,`importScripts("${this._hermesMessengerUrl}");\n`,`importScripts("${this._serializersUrl}");\n`,...this._importedScripts.map(e=>`importScripts("${e}");\n`),`importScripts("${this._initFunctionUrl}");\n`])}async _buildInitWorkerFunction(){if(this._workerIsUrl){const e=await fetch(this._fileWorkerUrl),r=await e.text();this._workerFunctionUrl=URL.createObjectURL(new Blob(this._createBlobWithArray([r])))}this._initFunctionUrl=URL.createObjectURL(this._createBlobWithArray([i]))}_buildHermesSerializerUrl(){this._hermesSerializerUrl=URL.createObjectURL(this._createBlobWithArray(["const HermesSerializers = "+n.toString(),"\nself['__serializers__'] = new HermesSerializers();"]))}_buildSerializersUrl(){this._serializersUrl=URL.createObjectURL(this._createBlobWithArray(this._serializers.map(e=>`\n                    self['__serializers__'].addSerializer({\n                        serialize: ${e.serialize.toString()}, \n                        unserialize: ${e.unserialize.toString()}\n                    });\n                `)))}_createBlobWithArray(e){return new Blob(e,{type:"application/javascript"})}_startWorkers(){for(let e=0;e<this._params.threadInstances;e++)this._workerPool[e]={worker:new Worker(this._workerURL),load:!1},this._workerPool[e].worker.onmessage=r=>{this._onWorkerMessage(this._workerPool[e],r.data)},this._workerPool[e].worker.onerror=e=>{this._onWorkerError(e)},this._workerPool[e].worker.postMessage({type:"config",data:{threadInstance:e,_workerFunctionUrl:this._workerFunctionUrl,...this._params.config}})}_checkWorkersLoad(){this._workerPool.every(e=>e.load)&&(this.isLoaded=!0,this._loadedPromise.forEach(e=>e()),this._cleanBlobUrls(),this._applyQueue())}_applyQueue(){this._requestQueue.forEach(e=>{const r=this._getNextWorker();if(!r)return this._pendingsCalls[e.id].reject(new Error({err:"worker not found"}));r.postMessage(e)}),this._requestQueue=[]}_onWorkerMessage(e,r){if("ready"===r.type)e.load=!0,this._checkWorkersLoad();else if("answer"===r.type){if(!this._pendingsCalls[r.id])return;this._pendingsCalls[r.id].resolve(this._hermesSerializers.unserializeArgs(r.result)[0]),delete this._pendingsCalls[r.id]}}_onWorkerError(e){console.error(e)}_getNextWorker(){let e=this._lastWorkerCall+1;return e===this._workerPool.length&&(e=0),this._lastWorkerCall=e,this._workerPool[e].worker}waitLoad(){return this.isLoaded?Promise.resolve():new Promise(e=>{this._loadedPromise.push(e)})}call(e,r=[]){return new Promise((t,s)=>{const i={type:"call",id:(new Date).getTime()+Math.random()*Math.random(),arguments:this._hermesSerializers.serializeArgs(r),name:e};if(this._pendingsCalls[i.id]={resolve:t,reject:s},this.isLoaded){const e=this._getNextWorker();if(!e)return s(new Error({err:"worker not found"}));e.postMessage(i)}else this._requestQueue.push(i)})}terminate(){this._workerPool.forEach(e=>{e.worker.terminate()}),Object.values(this._pendingsCalls).forEach(e=>{e.reject({error:"Hermes worker is destroyed"})})}}},function(e,r,t){"use strict";t.r(r),r.default='// THIS FILE IS LOADED IN WORKER\n\n/**\n * Used in worker to talk to page\n */\n/* eslint-disable no-unused-vars */\nclass HermesMessenger {\n    constructor() {\n        this.config = {};\n        this._loadedPromise = [];\n        this._routes = {};\n        this.serializers = __serializers__;\n        self.addEventListener("message", event => this._onEvent(event.data));\n    }\n\n    /**\n     * Return promise when worker is loaded\n     */\n    waitLoad() {\n        return new Promise((resolve) => {\n            this._loadedPromise.push(resolve);\n        });\n    }\n\n    /**\n     * Send to the page that the worker is ready to use\n     */\n    ready() {\n        this._sendEvent({\n            type: "ready",\n        });\n    }\n\n    /**\n     * Expose the callback from call by page\n     *\n     * @param {String} eventName\n     * @param {Function} callback\n     * @param {any} option\n     */\n    on(eventName, callback, option = {}) {\n        if (!option.type) option.type = "default";\n\n        this._routes[eventName] = {\n            callback,\n            option,\n        };\n    }\n\n    /**\n     * Is called by page for talking to worker\n     *\n     * @param {Object} event\n     */\n    _onEvent(event) {\n        if (event.type === "config") {\n            this.config = event.data;\n            this._loadedPromise.forEach(resolve => resolve());\n        } else if (event.type === "call") {\n            this._call(event);\n        }\n    }\n\n    /**\n     * Used for calling worker route\n     *\n     * @param {Object} data\n     */\n    async _call(data) {\n        if (this._routes[data.name]) {\n            const args = this.serializers.unserializeArgs(data.arguments);\n            if (this._routes[data.name].option.type === "async") {\n                const result = await this._routes[data.name].callback(...args);\n                const serializedResult = this.serializers.serializeArgs([result]);\n                this._sendAnswer(data, serializedResult);\n            } else {\n                const result = this._routes[data.name].callback(...args);\n                const serializedResult = this.serializers.serializeArgs([result]);\n                this._sendAnswer(data, serializedResult);\n            }\n        } else {\n            throw new Error(data.name + " is not found on worker");\n        }\n    }\n\n    /**\n     * @param {any} data\n     * @param {number} data.id, id is the unique id of question\n     * @param {any} result\n     */\n    _sendAnswer(data, result) {\n        this._sendEvent({\n            type: "answer",\n            id: data.id,\n            result,\n        });\n    }\n\n    _sendEvent(data) {\n        self.postMessage(data);\n    }\n}\n'},function(e,r,t){"use strict";t.r(r),r.default="/* eslint-disable no-undef */\n// eslint-disable-next-line no-global-assign\nconst hermes = new HermesMessenger();\nself.hermes = hermes;\nhermes.waitLoad().then(() => {\n    importScripts(hermes.config._workerFunctionUrl);\n});\n"},function(e,r){e.exports=class{constructor(){this._serializers=[]}addSerializer(e){if(!e.serialize||!e.unserialize)throw new Error("Serializer required a methods serialize and unserialize",e);this._serializers.push(e)}serializeArgs(e){for(let r=this._serializers.length-1;r>=0;r--)e=this._serializers[r].serialize(e);return e}unserializeArgs(e){return this._serializers.reduce((e,r)=>r.unserialize(e),e)}}},function(e,r){e.exports={serialize:e=>{"use strict";const r=["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"],t=[],s=[];for(let i=0;i<e.length;i++)if(e[i]instanceof Error){const r={type:"Error",value:{name:e[i].name}},s=Object.getOwnPropertyNames(e[i]);for(let t=0;t<s.length;t++)r.value[s[t]]=e[i][s[t]];t.push(r)}else if(e[i]instanceof DataView)s.push(e[i].buffer),t.push({type:"DataView",value:e[i].buffer});else{if(e[i]instanceof ArrayBuffer)s.push(e[i]),e[i]="hermes__transferable__"+s.length-1;else if("ImageData"in self&&e[i]instanceof ImageData)s.push(e[i].data.buffer),e[i]={type:"hermes__transferable__ImageData",index:s.length-1,width:e[i].width};else for(let t=0;t<r.length;t++)if(e[i]instanceof self[r[t]]){s.push(e[i].buffer),e[i]="hermes__transferable__"+s.length-1;break}t.push({type:"arg",value:e[i]})}return{args:JSON.stringify(t),transferable:s}},unserialize:e=>{"use strict";const r=JSON.parse(e.args)||[],t=[];for(let s=0;s<r.length;s++)switch(r[s].type){case"arg":if("object"==typeof r[s].value&&"hermes__transferable__ImageData"===r[s].value.type){const i=e.transferable[r[s].value.index];t.push(new ImageData(new Uint8ClampedArray(i),r[s].value.width))}else if(r[s].value&&r[s].value.startWith&&r[s].value.startWith("hermes__transferable__")){const i=r[s].value.replace("hermes__transferable__","");t.push(e.transferable[i])}else t.push(r[s].value);break;case"Error":const i=new Error;for(const e in r[s].value)i[e]=r[s].value[e];t.push(i);break;case"DataView":t.push(new DataView(r[s].value))}return t}}}])}));